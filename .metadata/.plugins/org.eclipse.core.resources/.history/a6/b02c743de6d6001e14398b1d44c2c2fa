package uploadFileToDB;

import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

public class JasperReportPDFGenerator {

    public static void generatePDFReport(String jrxmlFilePath, String outputPDFFilePath, Map<String, Object> parameters, JRDataSource dataSource) throws JRException {
        try {
            // Compile JRXML to JasperReport object
            JasperReport jasperReport = compileReport(jrxmlFilePath);

            // Fill the report with data
            JasperPrint jasperPrint = fillReport(jasperReport, parameters, dataSource);

            // Export the report to PDF
            exportToPDF(jasperPrint, outputPDFFilePath);
        } catch (JRException e) {
            // Handle JasperReports exception
            e.printStackTrace();
            throw e;
        }
    }

    private static JasperReport compileReport(String jrxmlFilePath) throws JRException {
        try {
            File file = new File(jrxmlFilePath);
            if (!file.exists()) {
                throw new JRException("JRXML file not found: " + jrxmlFilePath);
            }

            // Compile JRXML to JasperReport object
            InputStream inputStream = new FileInputStream(file);
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            JRSaver.saveObject(jasperReport, jrxmlFilePath.replace(".jrxml", ".jasper")); // Save compiled report for future use
            return jasperReport;
        } catch (Exception e) {
            throw new JRException("Error compiling JRXML: " + e.getMessage(), e);
        }
    }

    private static JasperPrint fillReport(JasperReport jasperReport, Map<String, Object> parameters, JRDataSource dataSource) throws JRException {
        try {
            // Fill the report with data
            return JasperFillManager.fillReport(jasperReport, parameters, dataSource);
        } catch (JRException e) {
            throw new JRException("Error filling report: " + e.getMessage(), e);
        }
    }

    private static void exportToPDF(JasperPrint jasperPrint, String outputPDFFilePath) throws JRException {
        try {
            // Export the report to PDF
            JasperExportManager.exportReportToPdfFile(jasperPrint, outputPDFFilePath);
        } catch (JRException e) {
            throw new JRException("Error exporting report to PDF: " + e.getMessage(), e);
        }
    }

    public static void main(String[] args) {
        // Example usage:
        String jrxmlFilePath = "C:/metaResponseBatchFile/metaResponseBatchFile/src/main/resources/metaresponse.jrxml";
        String outputPDFFilePath = "C:/metaResponseBatchFile/report.pdf";

        // Set any parameters needed for the report
        Map<String, Object> parameters = new HashMap<>();
        // Add parameters if required
        // parameters.put("paramName", paramValue);

        try {
            // Call the generatePDFReport function
            generatePDFReport(jrxmlFilePath, outputPDFFilePath, parameters, null); // Pass null if no data source is required
            System.out.println("PDF report generated successfully!");
        } catch (JRException e) {
            System.err.println("Error generating PDF report: " + e.getMessage());
        }
    }
}
